// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   @unique
  role          UserRole  @default(USER)
  accounts      Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboards")
  categories Category[]  @relation("StoreToCategories")
  products   Product[]   @relation("StoreToProduct")
  colors     Color[]     @relation("StoreToColors")
  sizes      Size[]      @relation("StoreToSize")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String     @db.ObjectId
  store      Store      @relation("StoreToBillboards", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreToCategories", fields: [storeId], references: [id])
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String   @db.ObjectId
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  name       String
  description String
  brand      String
  price      Float
  sizeId     String   @db.ObjectId
  size       Size     @relation(fields: [sizeId], references: [id])
  colorId    String   @db.ObjectId
  color      Color    @relation(fields: [colorId], references: [id])
  // thumbnailId String @db.ObjectId
  // thumbnail  Image    @relation(fields: [thumbnailId], references: [id])
  images     Image[]  @relation("ProductToImages")
  isFeatured Boolean  @default(false)
  isFamous   Boolean  @default(false)
  isPopular  Boolean  @default(false)
  isSpecial  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@index([thumbnailId])

  @@index([storeId])
  @@index([categoryId])
}

model Color {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId  String    @db.ObjectId
  store    Store     @relation("StoreToColors", fields: [storeId], references: [id])
  name     String
  value    String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Size {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId  String    @db.ObjectId
  store    Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name     String
  value    String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation("ProductToImages", fields: [productId], references: [id])
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
